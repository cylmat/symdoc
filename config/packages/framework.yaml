# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true
    #http_method_override: true

    # Enables session support. Note that the session will ONLY be started if you read or write from it.
    # Remove or comment this section to explicitly disable session support.
    #
    # @see https://symfony.com/doc/5.0/session.html
    session:
        enabled: true
        cookie_secure: auto
        cookie_samesite: lax

        # session in database 2/2 (service.yml)
        #handler_id: null # native PHP session
        #handler_id: Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        #handler_id: 'session.handler.native_file'
        handler_id: App\Application\Session\CustomSessionProxy

        # allow Symfony to work with a session started outside of the Symfony HttpFoundation component
        #storage_id: session.storage.php_bridge
        storage_id: App\Application\Session\CustomSessionStorage

    esi: true # { enabled: true }
    
    #fragments: true
    php_errors:
        log: true

    http_client:
        # Multiple pre-configured HTTP client
        default_options:
            http_version: '2.0'
            #max_host_connections: 10
            headers:
                'User-Agent': 'My Fancy App'

        # specific options for choosed urls
        scoped_clients:
            my_api.client: 
                scope: http://test
                auth_bearer: secretbearertoken
                http_version: '1.1'
                max_redirects: 10
            github:
                scope: 'https://api\.github\.com'
                headers:
                    Accept: 'application/vnd.github.v3+json'
                    Authorization: 'tokenapitoken'
            # using base_uri, relative URLs (e.g. request("GET", "/repos/symfony/symfony-docs"))
            # will default to these options
            githubBase:
                base_uri: 'https://api.github.com'
                headers:
                    Accept: 'application/vnd.github.v3+json'
                    Authorization: 'tokenapitoken'

    default_locale: en
    error_controller: App\Application\Controller\Error\AppErrorController

    router:
        strict_requirements: true
    
    # for twig fragment
    fragments: { path: /_fragments_update }

# secrets:
    #vault_directory: '%kernel.project_dir%/config/secrets/%kernel.environment%'
    #local_dotenv_file: '%kernel.project_dir%/.env.%kernel.environment%.local'
    #decryption_env_var: 'base64:default::SYMFONY_DECRYPTION_SECRET'

    ########
    # FORM #
    ########
    csrf_protection: ~ # _token in forms
    validation: { enabled: true, enable_annotations: true }

    #########
    # CACHE #
    # cache.adapter.apcu / array /doctrine / filesystem / memcached / pdo / psr6 / redis
    #
    # service ID is the name of the pool (e.g. custom_thing.cache). 
    # autowiring alias is also created for each pool using the camel case version of its name
    #########
    cache:
        app: cache.adapter.filesystem
        system: cache.adapter.system
        default_pdo_provider: 'doctrine.dbal.default_connection'

        directory: '%kernel.cache_dir%/pools' # Only used with cache.adapter.filesystem

        pools:
            # creates a "custom_thing.cache" service
            # autowireable via "CacheInterface $customThingCache"
            custom_thing.cache:
                adapter: cache.app
                tags: true

            my_foobar_cache_pool: # $myFoobarCachePool service
                default_lifetime: 31536000  # One year
                
                # Chaining
                # Better to be from fastest to slowest
                adapters:
                    - cache.adapter.array
                    - cache.adapter.apcu
                    - cache.adapter.filesystem
                    # ... redis or other
                    # - {name: cache.adapter.redis, provider: 'redis://user:password@example.com'}

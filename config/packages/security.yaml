security:
    encoders:
        App\Application\Security\AppUser:
            algorithm: auto # Argon2 (sodium)

        myencoder: 
            id: 'App\Application\Security\MyPassEncoder'

        other:
            algorithm: auto

    session_fixation_strategy: migrate

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # bin/console debug:container user.provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider: # security.user.provider.concrete.app_user_provider
            id: App\Application\Security\UserProvider
        my_memory_provider: # security.user.provider.concrete.my_memory_provider
            memory:
                users:    
                    alpha: { password: 'b3t@', roles: ['ROLE_ADMIN'] }
        all_users: # security.user.provider.concrete.all_users
            chain: # first in, first look
                providers: ['my_memory_provider', 'app_user_provider']

    firewalls:
        # first pattern matched, first used!
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # my_very_own_provider:
            # https://symfony.com/doc/5.0/security/custom_authentication_provider.html
            # token, listener, provider, factory, config

        # basic: 
        #     pattern: ^/basic
        #     http_basic:
        #         realm: Securing

        remote:
            pattern: ^/security
            # or
            host: ^.*$
            # or
            methods: [GET, POST]
            # or
            request_matcher: App\Application\Security\RequestMatcher
                    # app.firewall.remote.request_matcher

            # guard:
            # json_login:
                # check_path: /login
            # simple_form:
            # http_basic:
            # http_basic_ldap:

            # Activate the RememberMeAuthenticator if support it
            # (Triggered from GuardAuthenticationListener)
            remember_me:
                secret: t3st_r3m3mber
                lifetime: 600
                path: / # entire website
                secure: false
                httponly: true # not by script languages
                samesite: lax # don't be send via cross-site, lax allow to keep from externalalways_remember_me
                always_remember_me: true

            # https://symfony.com/doc/4.4/security/auth_providers.html
            # Built-in auth provider -> RemoteUserAuthenticatorListener

            # Security\Http\Firewall
            #   TraceableFireWallListener
            #     WrappedLazyListener
            #       AbstractPreAuthenticatedListener
            #         RemoteUserAuthenticationListener
            remote_user: # from server or .env
                provider: app_user_provider
                user: custom_one

            # custom_authenticators: # 5.3
            context: shared_one
            user_checker: App\Application\Security\CustomChecker # security.user_checker.remote
            provider: app_user_provider
            guard: # made with bin/console make:auth
                authenticators:
                    # bypass the authenticator from GuardAuthenticatorListener
                    - App\Application\Security\CustomQueryAuthenticator
                    # - others...
                    # - others...
                entry_point: App\Application\Security\CustomQueryAuthenticator

        main:
            anonymous: lazy # prevents the session from being started if there is no need for authorization
            provider: app_user_provider
            context: shared_one

            # use http://example.com/somewhere?_switch_user=thomas
            # and http://example.com/somewhere?_switch_user=_exit
            # ROLE_ALLOWED_TO_SWITCH
            switch_user: true # not compatible with "remote_user" for exemple
            # for params
            # switch_user: { role: ROLE_ADMIN, parameter: _want_to_be_this_user }
            # can use SecurityEvents::SWITCH_USER

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            # logout:
                # path: app_logout
                # target: app_any_route
                # success_handler: service LogoutSuccessHandlerInterface
    
    role_hierarchy:
        ROLE_ADMIN:  ROLE_USER
        ROLE_CUSTOM: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN, ip: 127.0.0.1, port: 8080, host: symfony\.com$, methods: [GET] }
        # - { path: ^/profile, roles: ROLE_USER }

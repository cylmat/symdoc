# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

imports:
    - { resource: services/knp/knp_menu.yml }
    # - { resource: 'sample_config.php' } # Can import different format (e.g. php)

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    a: "%%b%%" # will output "%b%"
    b: "%a%%"  # will output "%b%%"
    devhost: docker
    app_env: '%env(APP_ENV)%'
    # processor: int,string,bool,float,const,base64,json,resolve(params),csv,file,require,trim,url
    proc: '%env(trim:string:APP_ENV)%' 
    proc_array: '%env(key:FOO:BAR)%'
    default: '%env(default:proc:BAR)%' 
    query: '%env(query_string:BAR)%' # from url
    tokens:
        client1: tokenized
        client2: tokenizing

    # KERNEL
    # @see https://symfony.com/doc/5.0/reference/configuration/kernel.html
    # container.build_hash: 123 # a hash of the contents of all your source files;
    # container.build_time: 123 # a timestamp of the moment when the container was built
    # container.build_id: 5 # the result of merging the two previous parameters and encoding the result using CRC32

services:
    # default configuration for services in *this* file only
    _defaults:
        # Autowiring will automatically call any method with the @required annotation above it (setter)
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false

    # Autowire interfaces and add tags to them
    _instanceof:
        App\Domain\Service\ServiceDomainInterface:
            public: false
            tags: ['service.my_tag']
            # tags sample: - { name: 'app.mail_transport', alias: 'sendmail' }

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    #
    # Resource and exclude can be any GLOB pattern
    App\:
        # namespace: MyNamespace\
        resource: '../src/'
        exclude:
            - '../src/Kernel.php'
            - '../src/Tests/'
            # - '../src/DependencyInjection/'
            # - '../src/Entity/'

            #####################
            # manually imported #
            #####################
            - '../src/Application/Service/'
            - '../src/Domain/**/*Handler'
            - '../src/Infrastructure/'

            ################
            # Not imported #
            ################
            - '../src/Application/Response.php'
            - '../src/Domain/Message/*'
            - '../src/Domain/Model/*'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Application\Controller\:
        # namespace: MyNamespace2\
        resource: '../src/Application/Controller/'
        exclude: '../src/Application/Controller/Error/'
        tags: ['controller.service_arguments']
        bind:
            # for any $logger argument, pass this specific service
            $bind_from_service_logger: '@monolog.logger.doctrine'
            Psr\Log\LoggerInterface $httpClientLogger: '@monolog.logger.http_client'
            string $myCustomData: 'from services.yaml'
            iterable $rules: !tagged_iterator 'service.my_tag'
            $taggedLocator: !tagged_locator
                { tag: 'handler.main', index_by: 'key', default_index_method: 'getDefaultIndexNameCustom' }
            $commandLocator: '@app.command_handler_locator'

    App\Application\Listener\ViewListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response }

    ###################
    # SERVICE LOCATOR #
    ###################
    my.other.service.bis: 
        class: App\Application\Service\TwitterClient

    my.other.service.ter: 
        class: App\Application\Service\TwitterClient
        tags: 
            - { name: 'handler.main', key: 'customing_two_twitter' }

    app.command_handler_locator:
        class: Symfony\Component\DependencyInjection\ServiceLocator
        tags: ['container.service_locator']
        arguments:
            -
                - '@App\Application\Service\Rot13Transformer'
                - '@App\Application\Service\TwitterClient'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

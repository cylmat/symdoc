parameters:
    # Generate url in commands
    router.request_context.host: 'example.org'
    router.request_context.scheme: 'http'
    asset.request_context.secure: false
    router.request_context.base_url: 'my/path'
    asset.request_context.base_path: '%router.request_context.base_url%'
    # -commands

services:
    rot13:
        class:    App\Application\Service\Rot13Transformer
        arguments: [false]
    
    twitter_client:
        class:    App\Application\Service\TwitterClient
        autowire: true
        tags: ['app.test']
        calls:
            # the TRUE argument turns this into a wither method
            # vendor/symfony/dependency-injection/Compiler/AutowirePass.php 
            # vendor/symfony/config/Loader/FileLoader.php
            - [withConfiguredSerializer, ['@serializer'], true]
            # tell Container to use returned value of method
            - withLogger: !returns_clone ['@logger']
    
    # ###
    # Aliases HAVE to be manually declared to type-hint
    # ###
    App\Application\Service\Rot13Transformer: '@rot13'
    App\Application\Service\TwitterClient: '@twitter_client'
    App\Application\Service\TwitterClientAlias: 
        alias: '@twitter_client'
        public: false
        deprecated: 'The "%alias_id%" alias is deprecated. Do not use it anymore.'

    App\Application\Service\TwitterClientChild:
        parent: App\Application\Service\TwitterClient

    # Anonymous service, must be defined manually
    App\Foo:
        autowire: false
        autoconfigure: false
        arguments:
            - !service
                class: App\AnonymousServiceBar
    
    App\Application\Service\FromFactoryService:
        factory: [ !service { class: App\Application\Factory\ServiceFactory }, 'createFromFactoryService' ]
        arguments: ['alphabeta']

    # ###
    # ArgumentResolver
    # ###
    App\Application\ArgumentResolver\CustomValueResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 50 }

    ########################
    # SAMPLE AND DECORATOR #
    ########################
    # services:
    #         Doctrine\Migrations\Version\DbalMigrationFactory: ~
    #         App\Migrations\Factory\MigrationFactoryDecorator:
    #             decorates: Doctrine\Migrations\Version\DbalMigrationFactory
    #             arguments: ['@App\Migrations\Factory\MigrationFactoryDecorator.inner', '@service_container']
